# Copyright (c) 2025  Logic Magicians Software (Taylor Hutt).
# All Rights Reserved.
# Licensed under Gnu GPL V3.
#
import argparse
import os

def configure_parser():
    description = ("""

diff-review facilitates viewing differences between a base
(unmodified) and a modified version of sources files that are stored
in an SCM with a side-by-side diff utility such as 'tkdiff' or 'meld'.

The SCM interface examines the current, or committed, state of the SCM
and generates a dossier that describe the change.  Internally, each
file in a change will describe the state of two files: the base, and
modified versions of the file.  After the dossier is generated, the
tool will copy each one of these files to a review directory to
facilitate sharing with others, or personal viewing.

Assuming one would want to view the diff for Linux kernel commit
a7ed7b9d0ebb, the following command line would be executed:

    diff-review -r gungla -c a7ed7b9d0ebb

This will produce the following text on the console:


    diff-review:  /home/thutt/review/gungla

      modify   arch/arm64/include/asm/module.h
      modify   arch/arm64/include/asm/module.lds.h
      modify   arch/arm64/kernel/ftrace.c
      modify   arch/arm64/kernel/module-plts.c
      modify   arch/arm64/kernel/module.c

    Changes:  committed [5 files, 38 lines]  
    TkDiff :  view-review -R ~/review --viewer tkdiff -r gungla
    Meld   :  view-review -R ~/review --viewer meld -r gungla


The final two lines are commands that can be executed to view the
changes.  Both 'tkdiff' and 'meld' must reside in /usr/bin.

Press ESC to quit the menu displayed by view-review.

By default, all files are stored in ~/reviews.  The directory and all
its contents can be removed as desired; they can be regenerated by
running diff-review again.

""")

    help_epilog = ("""


Return Code:
  0       : success
  non-zero: failure
""")

    home       = os.getenv("HOME", os.path.expanduser("~"))
    review_dir = os.path.join(home, "review")

    formatter = argparse. RawDescriptionHelpFormatter
    parser    = argparse.ArgumentParser(usage           = None,
                                        formatter_class = formatter,
                                        description     = description,
                                        epilog          = help_epilog,
                                        prog            = "diff-review")

    o = parser.add_argument_group("SCM Control")
    o.add_argument("-c",
                   help     = ("Select a change, using the SCM's change "
                               "identification system, that you want to "
                               "'diff'.  If no change is provided, changed "
                               "but uncommitted files in the source client "
                               "will be reviewed."),
                   action   = "store",
                   default  = None,
                   metavar  = "<change id>",
                   required = False,
                   dest     = "arg_change_id")

    o.add_argument("--scm",
                   help     = ("Choose the SCM that holds the data you want "
                               "to 'diff'.  "
                               "[default: %(default)s] "
                               "[choices: %(choices)s]"),
                   action   = "store",
                   default  = "git",
                   choices  = [ "git" ],
                   dest     = "arg_scm")

    o.add_argument("--git-path",
                   help     = ("Allows overriding default path for git. "
                               "[default: %(default)s]"),
                   action   = "store",
                   default  = "/usr/bin/git",
                   metavar  = "<path of git executable>",
                   required = False,
                   dest     = "arg_git_path")

    o = parser.add_argument_group("Miscellaneous Options")
    o.add_argument("--threads",
                   help     = ("Overrides the default number of"
                               "threads used internally.  The default is based "
                               "on the number of CPUs the system has.  "
                               "[default: %(default)s]"),
                   action   = "store",
                   type     = int,
                   default  = 4 * os.cpu_count(),
                   metavar  = "<number-of-threads>",
                   required = False,
                   dest     = "arg_threads")

    o = parser.add_argument_group("Output Options")
    o.add_argument("-R", "--review-directory",
                   help     = ("Specifies root directory where diffs will be "
                               "written."),
                   action   = "store",
                   default  = review_dir,
                   metavar  = "<pathname>",
                   required = False,
                   dest     = "arg_review_dir")

    o.add_argument("-r", "--review-name",
                   help     = ("Specifies the name of the diffs as they will "
                               "be written."),
                   action   = "store",
                   default  = "default",
                   metavar  = "<name>",
                   dest     = "arg_review_name")

    o.add_argument("--verbose",
                   help     = ("Turn on verbose diagnostic output"),
                   action   = "store_true",
                   default  = False,
                   required = False,
                   dest     = "arg_verbose")


    o = parser.add_argument_group("Git-specific Control")
    o.add_argument("--git-tracked",
                   help     = ("Set untracked file handling.  "
                               "'no' shows no untracked files.  "
                               "'all' shows all untracked files.  "
                               "[default: %(default)s] "
                               "[choices: %(choices)s]"),
                   action   = "store",
                   default  = "all",
                   required = False,
                   choices  = [ "no", "all" ],
                   dest     = "arg_git_untracked")


    parser.add_argument("tail",
                        help  = "Command line tail",
                        nargs = "*")
    return parser
